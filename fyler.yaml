openapi: 3.0.3
info:
  version: '3.0'
  title: Fyle REST API
  contact:
    name: Integrations
    email: support@fyle.in
servers:
  - url: 'https://accounts.fylehq.com'
    description: Live Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            fyler.*: Grant all FYLER actions
  parameters:
    offset:
      in: query
      name: offest
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    limit:
      in: query
      name: limit
      description: >
        A limit on the number of objects to be returned. Allowed values are from
        1 to 200.
      schema:
        type: integer
        example: 100
        default: 200
    created_at:
      in: query
      name: created_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        created_at=gte.2020-06-01T00:00:00.000Z filters all employees created on
        or after 1st Jun 2020.<br>

        created_at=gte.2020-06-01T00:00:00.000Z&created_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `created` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    updated_at:
      in: query
      name: updated_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z filters all employees updated on
        or after 1st Jun 2020.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z&updated_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `updated` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    id:
      in: query
      name: id
      schema:
        type: string
      description: >-
        Filters the objects by id. For single value use `id=eq.<value>`. For
        multiple values, use `id=in.(value1,value2,value3)`.
      example: eq.<id>
    sub_project:
      in: query
      name: sub_project
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        sub_project=in.(value1,value2)
      schema:
        type: string
        example: like.Formula*
    display_name:
      in: query
      name: display_name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        display_name=in.(value1,value2)
      schema:
        type: string
        example: like.Fast*
    enabled:
      in: query
      name: enabled
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    code:
      in: query
      name: code
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        code=in.(value1,value2)
      schema:
        type: string
        example: like.high*
    org_id:
      in: query
      name: org_id
      description: |
        This param is used to filter records based org id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.orvneouegi
    category_ids:
      in: query
      name: category_ids
      description: |
        List of strings.<br>
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{12,7}'
    primary_approver_id:
      in: query
      name: primary_approver_id
      schema:
        type: string
      description: >-
        Filters the objects by primary_approver_id. For single value use
        `primary_approver_id=eq.<value>`. For multiple values, use
        `primary_approver_id=in.(value1,value2,value3)`.
      example: eq.ouX2Rv617cW0
    secondary_approver_id:
      in: query
      name: secondary_approver_id
      schema:
        type: string
      description: >-
        Filters the objects by primary_approver_id. For single value use
        `primary_approver_id=eq.<value>`. For multiple values, use
        `primary_approver_id=in.(value1,value2,value3)`.
      example: eq.ouX2Rv617cW0
  schemas:
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: >
            This error means current user does not have enough permissions to
            perform this operation.
    count:
      description: |
        The total number of objects that can be requested.
      type: integer
      example: 10000
    offset:
      description: >
        offset is used to skip that many number of objects before counting. <br>

        For example, if there are 2000 objects, <br>

        The first request will have offset as 0 and limit as 1000 to return
        first 1000 objects. <br>

        The second request will have offset as 1000 and limit as 1000 to return
        next 1000 objects. <br>
      type: integer
      example: 10
      default: 200
    limit:
      description: |
        The actual number of objects that are returned in the response.
      type: integer
      example: 100
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      example: orwruogwnngg
    org_name:
      type: string
      description: |
        The Name of the Organization to which the object is associated.
      example: Ministry of Magic
    created_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was created.
      readOnly: true
      example: '2020-06-01T13:14:54.804Z'
    updated_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was updated.
      readOnly: true
      example: '2020-06-11T13:14:55.201598Z'
    category:
      type: object
      properties:
        id:
          type: string
          maxLength: 10
          example: '16570'
          description: >
            This id provided by Fyle to identify a category from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          type: string
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        display_name:
          type: string
          maxLength: 255
          example: Engine / Turbo charged
          description: >
            This is a combination of name and sub_category separated by a / and
            spaces.

            In case if no sub_category is present it is same as name of the
            category.
        system_category:
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
    user:
      type: object
      readOnly: true
      properties:
        email:
          type: string
          format: email
          maxLength: 127
          description: >
            An immutable field that represents the email address of the
            Employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example: john.doe@example.com
        full_name:
          type: string
          maxLength: 255
          description: >
            Represents the full name of the Employee. Must be at least 3
            characters.
          example: John Doe
    projects:
      type: object
      properties:
        id:
          type: string
          maxLength: 10
          description: >
            This id provided by Fyle to identify a project from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
          readOnly: true
          example: '2391'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
        description:
          type: string
          maxLength: 255
          description: |
            This represents the description of project.
          example: Win the trophy
        enabled:
          type: boolean
          description: >
            This indicates if the project is enabled for use within the
            organisation.
          default: true
          example: true
        category_ids:
          type: array
          description: >
            Has the list of all category ids that are applicable for this
            project.
          items:
            type: string
          example:
            - '16570'
        categories:
          type: array
          description: |
            This list of categories that are applicable for this project.
          items:
            $ref: '#/components/schemas/category'
        primary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: >
            Primary approver who will be added as an approver by default for all
            the submitted reports and expenses.
          example:
            full_name: primary approver
            email: primary_approver@example.com
        primary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the primary approver.
          example: ou4b24ugv3vg
        secondary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A secondary approver who can be added to reports via policies.
          example:
            full_name: secondary approver
            email: secondary_approver@example.com
        secondary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the secondary approver.
          example: ourjgeugv3vg
    get_projects:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/fyler/projects
        data:
          type: array
          items:
            $ref: '#/components/schemas/projects'
    employee_id:
      type: string
      maxLength: 255
      description: >
        This id prodvided by Fyle to uniquely identify an employee within an
        organization.

        This id is always prefixed with `ou`.
      readOnly: true
      example: outGt9ju6qP
    employees:
      type: object
      description: Details of the employee to whom this object belongs to.
      readOnly: true
      properties:
        user_id:
          type: string
          maxLength: 255
          description: |
            This id helps to identify employees in other organisations.
            It is always prefixed with the string `us`.
            It is unique per email.
          example: usIYTLwzlaGu
        employee_code:
          type: string
          maxLength: 255
          example: E84122
          description: >
            This field refers to any string that the client programs can use to
            refer to an employee's unique id.

            This could be any field such as an UUID from an Active Directory
            server or employee id in a HRMS system.
        location:
          type: string
          maxLength: 255
          example: Bangalore Ofc
        level_id:
          type: string
          maxLength: 255
          example: lvlnvJUe9k6Vx
        department_id:
          type: string
          maxLength: 255
          example: dept9in4oIHpdR
        business_unit:
          type: string
          maxLength: 255
          example: Finance ops
          description: >-
            Represents the business unit of the organization to which of the
            employee belongs.
        title:
          type: string
          maxLength: 255
          example: Branch Manager
          description: Represents the title/desgination of the employee.
        mobile:
          type: string
          description: >
            Mobile number of the employee.

            `Given example is a fake number. We don't know who might answer your
            call.`
          example: +1-202-555-0167
        joining_dt:
          type: string
          format: date
          example: '2018-10-31'
          description: Date string in YYYY-MM-DD format
        full_name:
          type: string
          maxLength: 255
          example: John Doe
          description: >-
            Represents the full name of the employee. Must be at least 3
            characters.
    project:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
    cost_center:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          example: '11539'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        code:
          type: string
          example: sm-cc
    report:
      type: object
      readOnly: true
      properties:
        purpose:
          type: string
        approved_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was approved.

            This field could be null if the Report was not yet approved.
          example: '2020-07-23T09:32:00.933Z'
        reimbursed_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was Reimbursed.

            If the Expense is not reimbursed yet, this could be null. <br>
          example: '2020-07-28T09:32:00.933Z'
        claim_number:
          type: string
          maxLength: 255
        settlement_id:
          type: string
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Settlement.

            Once a Report is paid, the value of this field cannot be changed and
            is immutable. <br>
          example: setzS7mbPKPWg
        settled_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the report approved was settled. <br>
          example: '2020-07-23T09:32:00.933Z'
        trip_request_id:
          type: string
          description: An ID of the TripRequest associated with it
    expense_location:
      type: object
      properties:
        city:
          type: string
          example: London
        state:
          type: string
          example: London
        display_name:
          type: string
        country:
          type: string
          example: United Kingdom
        formatted_address:
          type: string
          example: '221 Baker St, Marylebone, London, United Kingdom'
        latitude:
          type: number
          example: 12.971599
        longitude:
          type: number
          example: 77.594566
    perdiem:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          example: '1104'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        currency:
          type: string
          maxLength: 3
          example: USD
        rate:
          type: integer
          example: 40
    file:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          description: |
            Id of the file object. Always starts with `fi`.
          example: figo4lgkn2224
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - THUMBNAILx200x200
            - ORIGINAL
            - ENCRYPTED
          description: >
            Indicates whether this file original size or encrypted or its
            thumbnail image.
          example: ORIGINAL
        password:
          type: string
          description: |
            Password which required to unlock the file.
          example: SuperSecretPassword
        download_path:
          type: string
          description: |
            Link to download this file.
            change this to right url later.
          example: /api/files/fiGxWO1vdkW8/download
    custom_properties:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: boolean
          - type: integer
          - $ref: '#/components/schemas/expense_location'
          - type: array
            items:
              type: string
        description: >
          The value for the custom properties. This could be a String, Boolean,
          Integer or an Array of Strings. <br>
      example:
        house: gryffindor
    approvals:
      type: object
      description: |
        siginifies all the approvals of a particular object.
      additionalProperties:
        type: object
        properties:
          state:
            type: string
            enum:
              - APPROVED
              - APPROVAL_PENDING
              - APPROVAL_DISABLED
      example:
        oueoblnegf:
          state: APPROVED
    expenses:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          example: tx12345
          description: >-
            An unique string to identify the Expense. Ignore this field when
            used as part of a POST request to create an Expense.
          readOnly: true
        employee_email:
          type: string
          maxLength: 127
          format: email
          description: >
            Email address of the Employee for whom the expense was/will-be
            created. Once an Expense is created, the value of this field cannot
            be changed and is immutable. <br>
          example: john.doe@example.com
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employees'
        spent_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the transaction for which the expense [being]
            fyled was made. <br>

            This date cannot be in future.
          example: '2020-07-21T17:32:28Z'
        source:
          type: string
          example: SLACK_APP
          description: >
            The name of the client app which is creating the expense.

            if its a thrid party app, it prefixed with TPA_.

            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If
            not passed, source is saved as TPA.
        currency:
          type: string
          maxLength: 3
          example: USD
          description: >
            ISO 4217 currency codes that are usually of three upper case
            letters.

            See "https://www.iban.com/currency-codes" for examples.

            If this field is ignored during a POST call to create/update an
            Expense, the default currency of the organization will be used.

            To use other currency than default currency use `foreign_currency`
            field.
        amount:
          type: number
          description: >
            The transaction amount for which the expense was/will-be fyled.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>

            Note that, when used as part of creating an Expense via POST, the
            actual amount in the Expense, in a subsequent GET call, may get
            changed either because of policies or admin/approvers changing the
            amount.
          example: 1500
        user_amount:
          type: number
          description: >
            The transaction amount as claimed by user.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>
          example: 1984.18
        policy_amount:
          type: number
          description: >
            The transaction amount which is modified by policy.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>
          example: 1500
        admin_amount:
          type: number
          description: >
            The transaction amount which is modified by admin or approver.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>

            This could be null if admin or approver has not edited your expense.
          example: null
        tax:
          type: number
          description: Tax amount as setup by your organisation.
          deprecated: true
        foreign_currency:
          type: string
          maxLength: 3
          example: INR
          description: >
            ISO 4217 currency codes that are usually of three upper case
            letters.

            See "https://www.iban.com/currency-codes" for examples.

            This field is used when expense is of non-default currency of an
            organisation.
        foreign_amount:
          type: number
          description: >
            The transaction foriegn amount for which the expense was/will-be
            fyled.

            The amount will be in the currency that is mentioned in the `foriegn
            currncy`<br>

            Note that, if an expense of currency other default currency of an
            organistation is used then `amount`, `foreign_currency`,
            `foreign_amount` are mandatory.
          example: 138962.05
        created_by:
          type: string
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Employee who
            created the expense. Once an Expense is created, the value of this
            field cannot be changed and is immutable. <br>
          example: ou12345Zdfx
          readOnly: true
        purpose:
          type: string
          maxLength: 1024
          description: Justification for the expense.
          example: Team lunch
        project_id:
          type: string
          description: >
            The ID generated by Fyle to uniquely identify the Project, to which
            the Expense belongs. <br>
          example: '1234'
        project:
          $ref: '#/components/schemas/project'
        cost_center_id:
          type: string
          description: >
            The ID generated by Fyle to uniquely identify the CostCenter, to
            which the Expense belongs. <br>
          example: '4321'
        cost_centers:
          $ref: '#/components/schemas/cost_center'
        category_id:
          type: string
          description: >
            The unique ID of a Category to which the Expense belongs. <br>

            Use `GET /api/tpa/v1/categories` to get the list of valid ID and
            Name of the Categories for the organization.
          example: '18'
        category:
          $ref: '#/components/schemas/category'
        state:
          type: string
          enum:
            - COMPLETE
            - DRAFT
            - PAID
            - PAYMENT_PROCESSING
            - APPROVER_PENDING
            - PAYMENT_PENDING
            - APPROVED
          description: >-
            The state of the Expense. This field shall be ignored in POST calls
            when creating/updating an Expense.
          readOnly: true
        fund_source:
          type: string
          enum:
            - PERSONAL
            - ADVANCE
            - CCC
          description: >-
            The fund source of the Expense. This field shall be ignored in POST
            calls when creating/updating an Expense.
          readOnly: true
        payment_id:
          type: string
        source_account_id:
          type: string
        source_account_type:
          type: string
        invoice_number:
          type: string
          description: |
            invoice number from the receipt.
        billable:
          type: boolean
          example: true
          description: This fields marks whether a given expense is billable a not.
        reimbursable:
          type: boolean
          example: true
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        expense_number:
          type: string
          description: |
            This is user visible identifier for an expense.
            This field can be used as reference in UI.
          example: E/2020/10/T/95
        exchange_rate:
          type: number
          description: >
            This field determines at which rate the expenses from foriegn
            currency was converted to home curreny
        report_id:
          type: string
          description: |
            Unique id given by Fyle to identify an Expense Report.
        reported_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was submitted via a Report to the
            Approvers.

            If the Expense is not added to a Report yet or if the Report is not
            yet submitted, this could be null.
        report:
          $ref: '#/components/schemas/report'
        physical_bill:
          type: boolean
          description: |
            This field indicated whether physicall bill was received or not.
          example: true
        physical_bill_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp indicating when the Expense's physicall bill was
            submitted.

            If the Expense's bill is not required to be submitted, then this
            could be null.
        verified:
          type: boolean
          description: |
            Indicates whether the Expense is verified or not
          readOnly: true
        verification_state:
          type: string
        verified_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was verified.

            If the Expense is not verified yet, this could be null. <br>
          readOnly: true
        skip_reimbursement:
          type: boolean
          deprecated: true
        vendor:
          type: string
          example: Uber
          maxLength: 255
          description: |
            String denoting the name of the vendor to which the Expense was made
        vendor_id:
          type: string
          example: 24242r
          maxLength: 255
          description: |
            String denoting the id of the vendor to which the Expense was made
        locations:
          description: >
            This field will be present for travel related categories. To add to
            and from location to you travel category related expenses add two
            locations in schema given below.
          type: array
          items:
            $ref: '#/components/schemas/expense_location'
        train_travel_class:
          description: |
            This field is applicable for only Train category.
          type: string
          example: string
        flight_journey_travel_class:
          description: >
            This field is applicable only for flight category. Can be
            `BUSINESS`, `ECONOMY`, `FIRST_CLASS`
          type: string
          example: ECONOMY
        flight_return_travel_class:
          description: >
            This field is applicable only for flight category. Can be
            `BUSINESS`, `ECONOMY`, `FIRST_CLASS`
          type: string
          example: BUSINESS
        bus_travel_class:
          description: |
            This field is applicable only for bus category.
          type: string
          example: AC
        from_dt:
          description: >
            This field is only relevant for travel related categories. This
            represents the onward date.
          type: string
          example: '2019-07-17T00:00:00.000Z'
        to_dt:
          description: >
            This field is only relevant for travel related categories. This
            represents the return date.
          type: string
          example: '2019-07-27T00:00:00.000Z'
        distance:
          type: number
        distance_unit:
          type: string
        num_days:
          type: integer
        mileage_calculated_distance:
          type: number
        mileage_calculated_amount:
          type: number
        mileage_vehicle_type:
          type: string
        mileage_rate:
          type: number
        mileage_is_round_trip:
          type: boolean
        hotel_is_breakfast_provided:
          type: boolean
        per_diem_rate_id:
          type: string
        per_diem_rate:
          $ref: '#/components/schemas/perdiem'
        activity_details:
          type: string
        activity_policy_pending:
          type: boolean
        num_files:
          type: integer
          description: |
            Number of files attached to this Expenses.
        has_attachments:
          type: boolean
          description: >
            Returns if there are file attachments that the Expense has. Usually
            the image of the receipts are added as attachments to the Expenses.
          readOnly: true
        attachments:
          description: >
            This field will not be present in the response for the GET method on
            the `/api/tpa/v1/expenses` call.
          type: array
          items:
            $ref: '#/components/schemas/file'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        user_can_delete:
          type: boolean
          description: >
            This field describes whether a user can delete this expenses.

            This is flag is set as false when travel agent creates expenses on
            your behalf.
          example: true
        policy_flag:
          type: boolean
          description: >-
            This field indicates whether policy execution has flagged this
            expenses or not.
          example: false
        manual_flag:
          type: boolean
          description: >
            This field indicates whether this expenses was manually flagged by
            approver or finance or admin.
          example: true
        policy_state:
          type: string
          enum:
            - FAILED
            - SUCCESS
            - RUNNING
          description: >
            This fields shows policy execution state for this expenses.

            If this field is null then its policy has not yet run on this
            expenses.
        extracted_data:
          type: object
        transcribed_data:
          type: object
        user_review_needed:
          type: boolean
        mandatory_fields_present:
          type: boolean
        transcription_state:
          type: string
          enum:
            - IN_PROGRESS
            - SUCCESS
            - FAILURE
            - NO_WORK
          example: SUCCESS
        receipt_required:
          type: boolean
        is_holiday_expense:
          type: boolean
        risk_state:
          type: string
          enum:
            - HIGH_RISK
            - MODERATE_RISK
            - NO_RISK
          example: NO_RISK
        external_id:
          type: string
        split_group_id:
          type: string
        split_group_user_amount:
          type: string
        external_expense:
          type: object
        corporate_credit_card_transaction:
          type: object
        transaction_approvals:
          allOf:
            - $ref: '#/components/schemas/approvals'
          example:
            ougelgneget:
              state: APPROVED
            ougo3nlwfgg:
              state: APPROVAL_PENDING
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
    delete_expenses:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: '/v4/fyler/expenses/{id}'
        data:
          type: array
          items:
            $ref: '#/components/schemas/expenses'
    expense_comments:
      type: object
      properties:
        notify:
          type: boolean
          description: |
            This indicates whether it should be notified or not.
          default: true
          example: true
        status:
          type: object
          description: |
            This indicates whether it should be notified or not.
          properties:
            comment:
              type: string
              maxLength: 255
              description: Comment made on the expense.
              example: This is a food expense
      required:
        - notify
        - status
    report_id:
      type: string
      maxLength: 255
      description: |
        This id prodvided by Fyle to uniquely identify a report.
        This id is always prefixed with `rp`.
      readOnly: true
      example: rptGt9ju6qP
    expense_id:
      type: string
      maxLength: 255
      description: |
        This id prodvided by Fyle to uniquely identify an expense.
        This id is always prefixed with `tx`.
      readOnly: true
      example: txhxw8h92ks
    post_expense_comments:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/fyler/expenses_comments
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                maxLength: 255
                example: tx12345
                description: >-
                  An unique string to identify the Expense Comment. Ignore this
                  field when used as part of a POST request to create an
                  Expense.
                readOnly: true
              comment:
                type: string
                maxLength: 255
                description: Comment made on the expense.
                example: This is a food expense
              created_at:
                $ref: '#/components/schemas/created_at'
              diff:
                type: object
                description: |
                  Difference between two comments
                readOnly: true
              employee_id:
                $ref: '#/components/schemas/employee_id'
              report_id:
                $ref: '#/components/schemas/report_id'
              expense_id:
                $ref: '#/components/schemas/expense_id'
              trip_request_id:
                type: string
                maxLength: 255
                description: |
                  Trip request id if any.
                readOnly: true
              advance_request_id:
                type: string
                maxLength: 255
                description: |
                  Advance request id if any.
                readOnly: true
              state:
                type: string
                maxLength: 255
                description: State of the comment.
    bulk_error:
      type: object
      properties:
        row:
          type: integer
          description: |
            This holds the info of which row contains bad data.
        key:
          type: string
          description: |
            This helps in identifying the error by unique key.
        message:
          type: string
          description: |
            This explains what the error is in `human readable` text.
    json_parsing_error:
      type: object
      properties:
        message:
          enum:
            - Unable to process JSON
          type: string
          description: |
            This error means that incoming json is not in right format.
        code:
          type: integer
          default: 400
          example: 400
          deprecated: true
    expenses_delete_bulk:
      type: array
      description: |
        Contains the list of expense id's.
      items:
        type: string
        maxLength: 255
        description: |
          Expense Id.
        example: txdg28d2k0k
    post_expenses_delete_bulk:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/fyler/expenses/delete/bulk
        data:
          type: array
          items:
            $ref: '#/components/schemas/expenses'
tags:
  - name: Projects
    description: |
      These APIs gives you list of your organisation's Projects data.
  - name: Expenses
    description: |
      This API gives you access to your Expenses data.
paths:
  /v4/fyler/projects:
    get:
      tags:
        - Projects
      summary: Returns a list of projects
      operationId: GetProjects
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/id'
        - in: query
          name: name
          description: |
            Supported operators are `eq`, `like`, `in`.<br>
            name=in.(value1,value2)
          schema:
            type: string
            example: eq.Project1
        - $ref: '#/components/parameters/sub_project'
        - $ref: '#/components/parameters/display_name'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/code'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/category_ids'
        - $ref: '#/components/parameters/primary_approver_id'
        - $ref: '#/components/parameters/secondary_approver_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_projects'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  '/v4/fyler/expenses/{id}':
    delete:
      tags:
        - Expenses
      summary: Delete single expense.
      description: |
        This API can be used to delete a particular expense at a time only.
      operationId: DeleteExpense
      parameters:
        - in: path
          name: id
          required: true
          description: |
            Expense ID that is to be deleted.<br>
          schema:
            type: string
            example: txhfw8d920k
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_expenses'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  '/v4/fyler/expense_comments/{id}':
    post:
      tags:
        - Expenses
      summary: Upsert expense comments
      description: |
        It creates comment on a specific expense.
      operationId: PostExpenseComments
      parameters:
        - in: path
          name: id
          required: true
          description: |
            Expense ID for which comment has to be created.<br>
          schema:
            type: string
            example: txhfw8d920k
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/expense_comments'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post_expense_comments'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Comment
                        message: Invalid comment
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/fyler/expenses/delete/bulk:
    post:
      tags:
        - Expenses
      summary: Delete bulk expenses.
      description: |
        This API can be used to delete multiple expense at a time.
      operationId: DeleteBulkExpense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/expenses_delete_bulk'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post_expenses_delete_bulk'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Comment
                        message: Invalid comment
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
